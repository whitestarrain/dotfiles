#! /usr/bin/env python3

import argparse
import os
import shutil
import time
from collections import OrderedDict

HOME = os.environ.get("HOME")
HISTORY_FILE_PATH = f"{HOME}/.bash_history"
MAX_BAK_FILES = 10
HISTORY_FILE_BAK_DIR_PATH = f"{HOME}/.bash_history.bak"

if not HOME:
    print("can't read HOME env")
    exit(0)

parser = argparse.ArgumentParser()
parser.add_argument(
    "--output",
    "-o",
    type=str,
    required=False,
    help="Output file path, default is stdin",
)
parser.add_argument(
    "--history_file",
    "-f",
    type=str,
    default=f"{HOME}/.bash_history",
    help="History file path, default is ~/.bash_history, ",
)
parser.add_argument(
    "--useless_command_prefix",
    "-d",
    type=str,
    default="",
    required=False,
    help="Split by comma, default is empty",
)

parser.add_argument(
    "--wrap_command_prefix",
    "-w",
    type=str,
    default="",
    required=False,
    help="Split by comma, default is empty.",
)

args = parser.parse_args()

if not os.path.exists(args.history_file):
    print(f"{args.history_file} doesn't exist")
    exit(0)

f = open(args.history_file)
lines = f.readlines()
history_lien_len = len(lines)

useless_command_prefix_list = [
    prefix for prefix in args.useless_command_prefix.split(",") if prefix
]
wrap_command_prefix_list = [
    prefix for prefix in args.wrap_command_prefix.split(",") if prefix
]

command2timestamp = OrderedDict()
index = history_lien_len - 1
while index >= 0:
    # skip emapty line
    while lines[index].startswith("#") or not lines[index]:
        index -= 1

    # get command and timestamp index
    command_end_index = index
    while not lines[index].startswith("#"):
        index -= 1
    command_start_index = index + 1
    timestamp_index = index

    # command
    command = "".join(lines[command_start_index : command_end_index + 1])
    if wrap_command_prefix_list:
        for prefix in wrap_command_prefix_list:
            if command.startswith(prefix):
                command = command[len(prefix) :]
                break
    command = command.strip() + "\n"
    # filter useless command
    if useless_command_prefix_list and any(
        command.startswith(prefix) for prefix in useless_command_prefix_list
    ):
        continue
    # save new command
    if command not in command2timestamp:
        command2timestamp[command] = lines[timestamp_index]

    # shift index
    index -= 1

result_lines = []
for command in reversed(command2timestamp):
    result_lines.append(command2timestamp.get(command))
    result_lines.append(command)

if not args.output:
    print("".join(result_lines))
else:
    if os.path.abspath(args.output) == os.path.abspath(HISTORY_FILE_PATH):
        bak_files = os.listdir(HISTORY_FILE_BAK_DIR_PATH)
        bak_files = sorted(bak_files, reverse=True)
        for expired_bak_file in bak_files[MAX_BAK_FILES:]:
            os.remove(os.path.join(HISTORY_FILE_BAK_DIR_PATH, expired_bak_file))
        bak_file_path = os.path.join(
            HISTORY_FILE_BAK_DIR_PATH, f".bash_history.{int(time.time())}"
        )
        print(f"copy file {HISTORY_FILE_PATH} to {bak_file_path}")
        shutil.copy(HISTORY_FILE_PATH, bak_file_path)
    with open(args.output, "w") as f:
        print(f"save duplicated history file: {args.output}")
        f.writelines(result_lines)

f.close()
