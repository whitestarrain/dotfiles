#!/usr/bin/env bash

set -e

HISTORY_FILE_PATH="${HISTFILE:-"$HOME/.bash_history"}"
SEPARATE_BY_TIMESTAMP="true"
USELESS_COMMAND_PREFIX=""

while [ $# -gt 0 ]; do
  case $1 in
  -h | --help)
    echo "usage: $(basename "$0") [-o | -f]"
    echo '  -o, --output                    Default stdin, file to output'
    echo '  -f, --history_file              Default $HISTFILE, history file path'
    echo '  -s, --separate_by_timestamp     Default true, separate each command from an other based on its timestamp'
    echo '  -d, --useless_command_prefix    Default empty, split by ","'
    exit
    ;;
  # For options with required arguments, an additional shift is needed.
  -o | --output)
    OUTPUT_FILE="$2"
    shift
    ;;
  -f | --history_file)
    HISTORY_FILE_PATH="$2"
    shift
    ;;
  -s | --separate_by_timestamp)
    SEPARATE_BY_TIMESTAMP="$2"
    shift
    ;;
  -d | --useless_command_prefix)
    USELESS_COMMAND_PREFIX="$2"
    shift
    ;;
  *)
    echo "$0: invalid option $1" 1>&2
    exit 1
    ;;
  esac
  shift
done

if [ ! -f "$HISTORY_FILE_PATH" ]; then
  echo "can't find bash history file"
  return
fi

IFS=',' read -r -a useless_prefixs <<<"$USELESS_COMMAND_PREFIX"

echo "start drop duplicate commands of ${HISTORY_FILE_PATH}, output to ${OUTPUT_FILE:-stdin}"

if [[ -n "$OUTPUT_FILE" && $(realpath "$HISTORY_FILE_PATH") == $(realpath "$OUTPUT_FILE") ]]; then
  bak_file_dir="$HOME/.bash_history.bak"
  if [[ ! -d "$bak_file_dir" ]]; then
    mkdir -p "$bak_file_dir"
  fi
  bak_file="$bak_file_dir/.bash_history.$(date +%s)"
  cp "$HISTORY_FILE_PATH" "${bak_file}"
  echo "create backup file: ${bak_file}"

  # delete old file, remain 10 files
  max_backup_num=30
  # -d '' will cause read return 1
  IFS=$'\n' read -d '' -r -a logfiles < <(find ~/.bash_history.bak -type f -name ".bash_history.*" | sort -r) || echo ''
  if [[ ${#logfiles[@]} -gt ${max_backup_num} ]]; then
    for i in $(seq $((max_backup_num)) $((${#logfiles[@]} - 1))); do
      if [[ -f "${logfiles[$i]}" ]]; then
        rm -f "${logfiles[$i]}"
      fi
    done

  fi
fi

# read the lines to list
IFS=$'\n' read -r -d '' -a lines <"${HISTORY_FILE_PATH}" || echo ''
declare -A timestamp_dict
declare -a commands

contains_element() {
  local e match="$1"
  shift
  # `for` default get value from $@
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# get command timestamp and all commands
for ((i = ${#lines[@]} - 1; i >= 0; i--)); do
  timestamp=''
  command=''
  if [[ "${lines[$i]}" == \#* ]]; then
    continue
  fi

  if [[ "$SEPARATE_BY_TIMESTAMP" == "true" ]]; then
    command="${lines[$i]}" # drop trailling newline
    ((i--))
    while [[ $i -ge 0 && "${lines[$i]}" != \#* ]]; do
      command="${lines[$i]}
${command}"
      ((i--))
    done
    timestamp="${lines[$i]}"
  else
    # single line command
    if [[ "${lines[$i]}" != [[:space:]]* ]]; then
      command="${lines[$i]}"
      if [[ $i-1 -ge 0 && "${lines[$i - 1]}" == \#* ]]; then
        timestamp="${lines[$i - 1]}"
        ((i--))
      fi
    fi

    # multi line command
    if [[ "${lines[$i]}" == [[:space:]]* ]]; then
      command="${lines[$i]}"
      ((i--))
      while [[ $i -ge 0 && "${lines[$i]}" == [[:space:]]* ]]; do
        command="${lines[$i]}
${command}"
        ((i--))
      done
      if [[ "${lines[$i]}" == \#* ]]; then
        timestamp="${lines[$i]}"
      else
        command="${lines[$i]}
${command}"
        if [[ "${lines[$i - 1]}" == \#* ]]; then
          ((i--))
          timestamp="${lines[$i]}"
        fi
      fi
    fi
  fi

  if [ -z "$command" ]; then
    continue
  fi

  # skip useless commands
  skip_flag=0
  if [[ ${#useless_prefixs[@]} -gt 0 ]]; then
    for prefix in "${useless_prefixs[@]}"; do
      if [[ "$command" == "${prefix}"* ]]; then
        skip_flag=1
        break
      fi
    done
  fi
  if [[ ${skip_flag} -eq 1 ]]; then
    continue
  fi

  if [[ -z "${timestamp_dict["${command}"]}" && -n "$timestamp" ]]; then
    timestamp_dict["${command}"]="$timestamp"
  fi
  if ! contains_element "${command}" "${commands[@]}"; then
    commands=("${command}" "${commands[@]}")
  fi
done

# update history file
get_dup_commands() {
  for ((i = 0; i < ${#commands[@]}; i++)); do
    if [ -n "${timestamp_dict["${commands[i]}"]}" ]; then
      echo "${timestamp_dict["${commands[i]}"]}"
    fi
    echo "${commands[i]}"
  done
}

if [[ -n "$OUTPUT_FILE" ]]; then
  get_dup_commands >"$OUTPUT_FILE"
else
  get_dup_commands
fi
