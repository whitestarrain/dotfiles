#### Terminfo

set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

# check tmux terminfo support && install terminfo
if-shell "test ! $(infocmp tmux-256color &> /dev/null && echo true)" {
  run-shell -b '\
    terminfo_path="$(dirname #{config_files})"/../.others/terminfo/terminfo.src && \
    test -f "${terminfo_path}" && \
    tic -xe tmux-256color "${terminfo_path}" \
  '
}

#### General Settings

set -g repeat-time 0
set -g focus-events on
setw -g allow-rename off
setw -g automatic-rename off
set -g history-limit 64096
set -g buffer-limit 20

# using C-a as the tmux prefix comes at the cost of some great features:
#   bash: move to start of line (in emacs mode, aka when i'm ssh'd somewhere)
#   vim: insert mode increment number
# this allows you to access those same features by hitting (C-a a)
unbind C-b
set-option -g prefix C-a
bind a send-prefix

# enable mouse support
set -g mouse on
# enable OSC
set -s set-clipboard on

# allow the title bar to adapt to whatever host you connect to
set -g set-titles on
set -g set-titles-string "#T"

# start index of window/pane with 1
set -g base-index 1
setw -g pane-base-index 1

# set escape time so vim is responsive inside tmux
set -g escape-time 1

# prevent tmux from displaying "Activity in window n"
set -g visual-activity off

#### Key bindings

# unbind default key bindings
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind l    # last-window
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

bind -N "Reload config" r source-file ~/.tmux.conf \; display "Reloaded!"
bind -N "Open current dir" o run-shell "open #{pane_current_path}"

# vim-like pane switching
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R

# pane switching and zoom
bind K select-pane -U \; resize-pane -Z
bind J select-pane -D \; resize-pane -Z
bind H select-pane -L \; resize-pane -Z
bind L select-pane -R \; resize-pane -Z

# make new panes and windows use the pwd
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# smart pane switching with awareness of vim splits
bind -n 'C-h' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n 'C-j' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n 'C-k' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n 'C-l' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n 'C-\' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# moving window
bind -n C-S-Left swap-window -t -1 \; previous-window
bind -n C-S-Right swap-window -t +1 \; next-window

# resizing pane
bind -r C-k resize-pane -U 5
bind -r C-j resize-pane -D 5
bind -r C-h resize-pane -L 5
bind -r C-l resize-pane -R 5

# toggle input to all pane in current window
bind -N "toggle input to all pane" C-x setw synchronize-panes

#### Copy mode

setw -g mode-keys vi

bind -N "Enter copy mode" [ copy-mode
bind -N "Paste buffer" ] paste-buffer
bind -N "Choose buffer" C-] choose-buffer

bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
bind -T copy-mode-vi 'C-\' select-pane -l

# copy mode keymap, similar with vim
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'y' send -X copy-selection
bind -T copy-mode-vi 'C-v' send -X rectangle-toggle \; send -X begin-selection
bind -T copy-mode-vi 'Y' send "^" \; send -X begin-selection \; send "\$h" \; send -X copy-selection \; send -X cancel

#### Color

# window color
set -g window-style fg=#adadad,bg=default
set -g window-active-style fg=white,bg=default

# pane border
set -g pane-border-style "fg=#1f5769"
set -g pane-active-border-style "fg=#eee8d5"

# message text
set-option -g message-style bg=colour235,fg=colour166

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange

# clock
set-window-option -g clock-mode-colour colour64 #green

# copy mode style
set -g mode-style "fg=#eee8d5,bg=#073642"

# message style
set -g message-style "fg=#eee8d5,bg=#073642"
set -g message-command-style "fg=#eee8d5,bg=#073642"

#### Statusline

set-option -g status-justify "left"

set -g status "on"
set -g status-interval 5
set -g status-justify "left"

if-shell 'test -n "$SSH_CLIENT"' {
  set -g status-position bottom
} {
  set -g status-position top
}

set -g status-style "fg=#586e75,bg=#073642"

set -g status-bg "#002b36"

set -g status-left-length "100"
set -g status-right-length "140"

set -g status-left-style NONE
set -g status-right-style NONE

set -g status-left "#[fg=#073642,bg=#eee8d5,bold] #S #[fg=#eee8d5,bg=#93a1a1,nobold,nounderscore,noitalics]#[fg=#15161E,bg=#93a1a1,bold] #(whoami) #[fg=#93a1a1,bg=#002b36]"
set -g status-right ""
if-shell "test -f /sys/class/thermal/thermal_zone0/temp" {
  set -ag status-right " #[fg=#c74a48,bg=default]cpu:#(cat /sys/class/thermal/thermal_zone0/temp | cut -c 1-2)°"
}
set -ag status-right " #[fg=#c74a48,bg=default]#(uptime | sed 's/^ *//g' | tr -s ' ' | cut -f 3-4 -d ' ' | cut -f 1 -d ',')"
if-shell 'test ! -n "$SSH_CLIENT"' {
  set -ag status-right " #[fg=white,bg=default]%l:%M:%S %p #[fg=cyan]%a #[fg=#6967c7]%Y-%m-%d"
}
set -ag status-right " #[fg=#586e75,bg=#002b36,nobold,nounderscore,noitalics]#[fg=#657b83,bg=#586e75,nobold,nounderscore,noitalics]#[fg=#93a1a1,bg=#657b83,nobold,nounderscore,noitalics]#[fg=#15161E,bg=#93a1a1,bold] #h "

setw -g window-status-separator ""
setw -g window-status-style "NONE,fg=#839496,bg=#002b36"
setw -g window-status-format '#[fg=#002b36,bg=#002b36]#[default] #I  #{=/8/…:#{b:pane_current_path}} #[fg=#002b36,bg=#002b36,nobold,nounderscore,noitalics]'
setw -g window-status-current-format '#[fg=#002b36,bg=#eee8d5]#[fg=#b58900,bg=#eee8d5] #I #[fg=#eee8d5,bg=#b58900] #{b:pane_current_path} #[fg=#b58900,bg=#002b36,nobold]'

# todo: with complex status bars, can't simply use window-status-active, but the flag #{?window_activity_flag,,}
setw -g window-status-activity-style "fg=#839496,bg=#002b36"
setw -g window-status-bell-style "fg=#839496,bg=#002b36"

#### Nesting local and remote sessions

bind -T root F12  \
  set prefix None \;\
  set key-table off \;\
  set window-status-current-format "#[fg=#002b36,bg=#002b36]#[fg=color166,bg=default] #I  #{b:pane_current_path} #[fg=#002b36,bg=#002b36,nobold,nounderscore,noitalics]" \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u window-status-current-format \;\
  refresh-client -S

#### Macos

if-shell "uname -s | grep -q Darwin" {
  # Undercurl
  set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
  set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
}

#### Utility

# Display lazygit
if-shell "which lazygit &>/dev/null" {
  bind -r g display-popup -d '#{pane_current_path}' -w80% -h80% -E lazygit
}

#### Plugins

if-shell "test ! -d ~/.tmux/plugins/tpm" {
  display "git clone tpm to ~/.tmux/plugins/tpm"
  if-shell "test ! -d ~/.tmux/plugins" { run-shell "mkdir -p ~/.tmux/plugins" }
  run-shell "git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm --depth=10"
}

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
resurrect_dir="$HOME/.local/share/tmux/resurrect"
set -g @resurrect-dir $resurrect_dir
set -g @resurrect-hook-post-save-all "sed -i \"s#/nix/store.*/bin/nvim.* -S #nvim -S #g\" $resurrect_dir/last"
set -g @resurrect-processes '"~nvim"'
set -g @plugin 'whitestarrain/tmux-open-nvim' # ton command
set -g @copy_mode_put 'P'
set -g @plugin 'tmux-plugins/tmux-yank'
if-shell "which ruby &>/dev/null" {
  set -g @jump-key 'u'
  set -g @plugin 'schasse/tmux-jump'
}
run '~/.tmux/plugins/tpm/tpm'

# change note
bind -N "install plugins" I
bind -N "update plugins" U
bind -N "uninstall plugins" M-u
bind -N "save session" C-s
bind -N "load session" C-r

